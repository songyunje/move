package test03;

public class Test1_거스름돈 {
	public static void main(String[] args) {
		
		
		// 탐욕 알고리즘
		// 1. 최적해 문제를 푸는데 사용
		//   최적해: 최소값, 최대값을 찾는 것 ex) 동전의 개수를 최소로.
		//   최적해는 1개.
		
		// 2. 각 단계마다 최선의 선택을 해나감
		//   - 어떻게 선택할지는 미리 정함
		//   - 각 선택이 부분해에 포함됨
		//   - 각 선택은 그 단계에서 최적해
		
		// 3. 모든 단계가 끝나면 부분해 집합이 곧 최적해가 됨
		
		
		// 최소의 동전 개수로 거스름돈을 주는 방법?
		// 각 단계에서 선택할 수 있는 방법? 500원, 100원, 50원, 10원
		// 각 단계에서 어떻게 선택할지 미리 정하자.
		//  - 각 방법을 비교해보자.
		//  - 500원 -> 1개
		//  - 100원 -> 5개
		//  -  50원 -> 10개
		//  -  10원 -> 50개
		// 각 단계에서는 최대한 금액이 큰 동전을 거슬러 주는 것이 최선의 선택.
		
		// 매 단계에서 동일한 기준으로 판단
		// f(1200)
		// f(900)
		// f(300)
		// 현재 단계에서 최선의 선택만을 생각
		// 선택했다면 그것을 부분해 집합에 포함하고, 그 다음단계로 넘어감
		
		// ex) f(800)
		// 1st) f(800) -> 500원 선택
		// 2nd) {500원 1개}, f(300) -> 100원 선택
		// 3rd) {500원 1개, 100원 1개} , f(200) -> 100원 선택
		// 4th) {500원 1개, 100원 2개} , f(100) -> 100원 선택
		// =>   {500원 1개, 100원 3개} : 최적해
		
		int money = 800;
		
		int c500 = money / 500;
		money -= c500 * 500;
		
		int c100 = money / 100;
		money -= c100 * 100;
		
		int c50 = money / 50;
		money -= c50 * 50;
		
		int c10 = money / 10;
		money -= c10 * 10;
		
		System.out.printf("500원: %d\n", c500);
		System.out.printf("100원: %d\n", c100);
		System.out.printf(" 50원: %d\n", c50);
		System.out.printf(" 10원: %d\n", c10);
		
		
	}
}
